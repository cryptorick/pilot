#!/bin/sh

_version=20160724

_script_path="${0%/*}"
_script_name="${0##*/}"
_system=$(uname -s)

CONFFILE=${CONFFILE-~/.${_script_name}rc}
[ -r "${CONFFILE}" ] && . "${CONFFILE}"

if [ -z "${DLCMD}" ]; then
  case ${_system} in
   FreeBSD)
    _dlcmd_suggest=fetch
    ;;
   OpenBSD)
    _dlcmd_suggest=ftp
    ;;
   *)
    _dlcmd_suggest="curl -O"
    ;;
  esac
  cat >&2 <<EOF
${_script_name}: there is no download command configured for this script.
Try something like this and then re-run this script:

cat >> ${CONFFILE}
DLCMD=\${DLCMD-${_dlcmd_suggest}}
^D
EOF
  exit 2
fi

_print_usage_and_bail () {
  cat >&2 <<EOF
${_script_name}, version ${_version}

Usages:

  ${_script_name} fetch  # download latest picolisp distro (tarball) from official server.
  ${_script_name} get    # same thing :)

  ${_script_name} extract  # extracts the distro downloaded that has the latest version.

  ${_script_name} help   # prints this (help) message.
EOF
  exit 0
}

if [ $# -eq 0 ] || [ $1 == "help" ]; then
  _print_usage_and_bail
fi

_fetch () {
  # The latest picoLisp distro should always be at this URL.
  LATEST_PIL_URL=${LATEST_PIL_URL-http://software-lab.de/picoLisp.tgz}

  # This is the pathname of the file in the distro (tarball) that
  # contains the version number.
  VERSION_FILE_PATH=${VERSION_FILE_PATH-picoLisp/src/vers.h}
  # For 64 bit:
  #VERSION_FILE_PATH=${VERSION_FILE_PATH-picoLisp/src64/version.l}

  # Now, download the latest tarball.
  echo "Downloading latest picoLisp distro (tarball)." >&2
  ${DLCMD} ${LATEST_PIL_URL} || exit 1

  local base_tarball="${LATEST_PIL_URL##*/}"

  # Try to extract the pil version from the contents.
  local tmpdir=/tmp/$$-${USER}
  mkdir -p ${tmpdir}
  tar zxf ${base_tarball} -C ${tmpdir} ${VERSION_FILE_PATH} || {
    echo "Could not extract the version file from the tarball.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 2
  }
  local version_file=${tmpdir}/${VERSION_FILE_PATH}
  local pil_version=$(cat ${version_file} |
                      awk -F'[{}]' '/ Version.+ = /{gsub(/,/,".",$2);print $2}')
  # For 64 bit:
  #local pil_version="$(cat ${version_file} |
  #                     awk -F'[ ()]'
  #                         '/\(de \*Version/ {
  #                            v=$4;for(i=5;i<NF;i++)v=v "." $i; print v}')"
  [ "${pil_version}" ] || {
    echo "Could not extract the version number from the version file.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 3
  }
  rm -fr ${tmpdir}

  # Rename the tarball.
  local base_tarball_with_version="${base_tarball%.*}-${pil_version}.${base_tarball##*.}"
  mv ${base_tarball} ${base_tarball_with_version}
  echo "Renamed the tarball to ${base_tarball_with_version}." >&2
  return
}

_extract () {
  local tarball=$(ls -1d ${DISTRODIR}/picoLisp-*tgz 2>/dev/null |
                     awk -F'[.-]' '{print $2, $3, $4, $0}' |
                     sort -n | awk '{print $NF}' | tail -1)

  [ "${tarball}" ] || {
    echo "Expecting to find picolisp distros in \`${DISTRODIR}\`." >&2
    echo "Found none.  Try \`${_script_name} fetch\` first.  Bailing ..." >&2
    exit 3
  }

  local base_tarball=${tarball##*/}
  local new_dirname=${base_tarball%.tgz}

  echo "Extracting latest picoLisp tarball into current directory ..." >&2
  rm -fr ${new_dirname}
  tar zxf ${tarball}
  mv picoLisp ${new_dirname}

  # picoLisp needs GNU make. Help the BSDs out.
  if echo ${_system} | grep BSD >/dev/null; then
    MAKE=${MAKE-gmake}
  fi
  MAKE=${MAKE:-make}
  echo "Next steps:" >&2
  echo "cd ${new_dirname}" >&2
  echo "(cd src64 && ${MAKE})" >&2
  return
}

# $DISTRODIR is where you put your picoLisp distros (tarballs).
DISTRODIR=${DISTRODIR:-.}

# $BUILDDIR is where you extract your picoLisp distros (tarballs).
BUILDDIR=${BUILDDIR:-.}

case $1 in
 fetch | get)
  (cd ${DISTRODIR} && _fetch)
  ;;
 extract)
  (cd ${BUILDDIR} && _extract)
  ;;
 *)
  _print_usage_and_bail
  ;;
esac

