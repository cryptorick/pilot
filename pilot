#!/bin/sh

_version=20160724

_script_path="${0%/*}"
_script_name="${0##*/}"
_system=$(uname -s)

CONFFILE=${CONFFILE-~/.${_script_name}rc}
[ -r "${CONFFILE}" ] && . "${CONFFILE}"

if [ -z "${DLCMD}" ]; then
  case ${_system} in
   FreeBSD)
    _dlcmd_suggest=fetch
    ;;
   OpenBSD)
    _dlcmd_suggest=ftp
    ;;
   *)
    _dlcmd_suggest="curl -O"
    ;;
  esac
  cat >&2 <<EOF
${_script_name}: there is no download command configured for this script.
Try something like this and then re-run this script:

cat >> ${CONFFILE}
DLCMD=\${DLCMD-${_dlcmd_suggest}}
^D
EOF
  exit 2
fi

if [ -z "${PREFIX}" ]; then
  cat >&2 <<EOF
${_script_name}: there is no install prefix configured for this script.
Try something like this and then re-run this script:

cat >> ${CONFFILE}
PREFIX=\${PREFIX-/usr/local}
^D
EOF
  exit 3
fi

# The latest picoLisp distro should always be at this URL.
LATEST_PIL_URL=${LATEST_PIL_URL-http://software-lab.de/picoLisp.tgz}

_print_usage_and_bail () {
  cat >&2 <<EOF
${_script_name}, version ${_version}
This tool helps you organize your picolisp downloads and installs.

Usages:

  ${_script_name} fetch    # Download the latest distro to \${DISTRODIR}.
  ${_script_name} get      # Synonym for \`fetch\`.

  ${_script_name} extract  # Extract the lastest distro (found in \${DISTRODIR}) into \${BUILDDIR}.

  ${_script_name} install  # Install the latest build from \${BUILDDIR} into \${PREFIX}.

Configuration:
(Some of these are defined in ${CONFFILE})

EOF
  for confvar in DISTRODIR BUILDDIR PREFIX DLCMD LATEST_PIL_URL; do
    confval=$(eval echo \$${confvar})
    if [ "${confval}" ]; then
      echo "  ${confvar}=${confval}" >&2
    else
      echo "  (${confvar} is unset.)" >&2
    fi
  done
  echo "" >&2
  exit 0
}

_fetch () {
  # This is the pathname of the file in the distro (tarball) that
  # contains the version number.
  VERSION_FILE_PATH=${VERSION_FILE_PATH-picoLisp/src/vers.h}
  # For 64 bit:
  #VERSION_FILE_PATH=${VERSION_FILE_PATH-picoLisp/src64/version.l}

  # Now, download the latest tarball.
  echo "Downloading latest picoLisp distro (tarball)." >&2
  ${DLCMD} ${LATEST_PIL_URL} || exit 11

  local base_tarball="${LATEST_PIL_URL##*/}"

  # Try to extract the pil version from the contents.
  local tmpdir=/tmp/$$-${USER}
  mkdir -p ${tmpdir}
  tar zxf ${base_tarball} -C ${tmpdir} ${VERSION_FILE_PATH} || {
    echo "Could not extract the version file from the tarball.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 12
  }
  local version_file=${tmpdir}/${VERSION_FILE_PATH}
  local pil_version=$(cat ${version_file} |
                      awk -F'[{}]' '/ Version.+ = /{gsub(/,/,".",$2);print $2}')
  # For 64 bit:
  #local pil_version="$(cat ${version_file} |
  #                     awk -F'[ ()]'
  #                         '/\(de \*Version/ {
  #                            v=$4;for(i=5;i<NF;i++)v=v "." $i; print v}')"
  [ "${pil_version}" ] || {
    echo "Could not extract the version number from the version file.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 13
  }
  rm -fr ${tmpdir}

  # Rename the tarball.
  local base_tarball_with_version="${base_tarball%.*}-${pil_version}.${base_tarball##*.}"
  mv ${base_tarball} ${base_tarball_with_version}
  echo "Renamed the tarball to ${base_tarball_with_version}." >&2
  echo "" >&2
  echo "Next step:" >&2
  echo "  ${_script_name} extract" >&2
  return
}

_extract () {
  local tarball=$(ls -1d ${DISTRODIR}/picoLisp-*tgz 2>/dev/null |
                     awk -F'[.-]' '{print $2, $3, $4, $0}' |
                     sort -n | awk '{print $NF}' | tail -1)

  [ "${tarball}" ] || {
    echo "Expecting to find picolisp distros in \`${DISTRODIR}\`." >&2
    echo "Found none.  Try \`${_script_name} fetch\` first.  Bailing ..." >&2
    exit 21
  }

  local base_tarball=${tarball##*/}
  local new_dirname=${base_tarball%.tgz}

  echo "Extracting latest picoLisp tarball into current directory ..." >&2
  rm -fr ${new_dirname}
  tar zxf ${tarball}
  mv picoLisp ${new_dirname}

  # picoLisp needs GNU make. Help the BSDs out.
  if echo ${_system} | grep BSD >/dev/null; then
    MAKE=${MAKE-gmake}
  fi
  MAKE=${MAKE:-make}
  echo "Next steps:" >&2
  echo "  (cd $PWD/${new_dirname}/src64 && ${MAKE})" >&2
  echo "  ${_script_name} install" >&2
  return
}

_install () {
  local install_dir=$(ls -1d ${BUILDDIR}/picoLisp-*/ 2>/dev/null |
                         awk -F'[.-]' '{print $2, $3, $4, $0}' |
                         sort -n | awk '{print $NF}' | tail -1)
  [ "${install_dir}" ] || {
    echo "Expecting to find picolisp build directories in \`${BUILDDIR}\`." >&2
    echo "Found none.  Try \`${_script_name} extract\`; then build.  Bailing ..." >&2
    exit 41
  }
  install_dir=${install_dir%/}

  local reconpre=
  if [ "$RECON" ]; then
    reconpre=echo
  else
    echo "Installing ${install_dir} to ${PREFIX} ..." >&2
  fi

  # Ensure prefix tree.
  ${reconpre} mkdir -p ${PREFIX}/bin ${PREFIX}/lib ${PREFIX}/libexec ${PREFIX}/share/man/man1 || exit 42

  local install_dir_base=${install_dir##*/}
  local installed_dir=${PREFIX}/libexec/${install_dir_base}

  ${reconpre} rm -fr ${installed_dir} || exit 43
  ${reconpre} cp -R ${install_dir} ${PREFIX}/libexec || exit 44

  # The prefix `/usr` is hard-wired into the official `pil` script; so
  # we need to jack in our prefix ${PREFIX}.
  if [ "${RECON}" ]; then
    echo sed "'s?/usr?${PREFIX}?g'" ${install_dir}/bin/pil \> ${installed_dir}/bin/pil
  else
    sed 's?/usr?'${PREFIX}'?g' ${install_dir}/bin/pil > ${installed_dir}/bin/pil
  fi

  ${reconpre} ln -fs ${installed_dir}/bin/picolisp ${PREFIX}/bin || exit 45
  ${reconpre} ln -fs ${installed_dir}/bin/pil ${PREFIX}/bin || exit 46
  ${reconpre} ln -fs ${installed_dir} ${PREFIX}/lib/picolisp || exit 47
  ${reconpre} ln -fs ${installed_dir}/man/man1/picolisp.1 ${PREFIX}/share/man/man1 || exit 48
  ${reconpre} ln -fs ${installed_dir}/man/man1/pil.1 ${PREFIX}/share/man/man1 || exit 49

  [ "${RECON}" ] || echo "done." >&2
  return
}

# $DISTRODIR is where you put your picoLisp distros (tarballs).
DISTRODIR=${DISTRODIR:-.}

# $BUILDDIR is where you extract your picoLisp distros (tarballs).
BUILDDIR=${BUILDDIR:-.}

case $1 in
 fetch | get)
  (cd ${DISTRODIR} && _fetch)
  ;;
 extract)
  (cd ${BUILDDIR} && _extract)
  ;;
 install)
  (cd ${BUILDDIR} && _install)
  ;;
 *)
  _print_usage_and_bail
  ;;
esac
