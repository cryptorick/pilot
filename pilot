#!/bin/sh

version=20160726

#script_path="${0%/*}"
script_name="${0##*/}"
system=$(uname -s)

CONFFILE=${CONFFILE:-~/.${script_name}rc}
[ -r "${CONFFILE}" ] && . "${CONFFILE}"

if [ -z "${DLCMD}" ]; then
  case ${system} in
   FreeBSD)
    dlcmd_suggest=fetch
    ;;
   OpenBSD)
    dlcmd_suggest=ftp
    ;;
   *)
    dlcmd_suggest="curl -O"
    ;;
  esac
  cat >&2 <<EOF
${script_name}: there is no download command configured for this script.
Try something like this and then re-run this script:

cat >> ${CONFFILE}
DLCMD=\${DLCMD:-${dlcmd_suggest}}
^D
EOF
  exit 2
fi

if [ -z "${PREFIX}" ]; then
  cat >&2 <<EOF
${script_name}: there is no install prefix configured for this script.
Try something like this and then re-run this script:

cat >> ${CONFFILE}
PREFIX=\${PREFIX:-/usr/local}
^D
EOF
  exit 3
fi

_print_help () {
  cat >&2 <<EOF
${script_name}, version ${version}
This tool helps you organize your picolisp downloads and installs.

Usages:

  ${script_name} fetch    # Download the latest distro to \${DISTRODIR}.
  ${script_name} get      # Synonym for \`${script_name} fetch\`.
  ${script_name} extract  # Extract the latest distro (found in \${DISTRODIR}) into \${BUILDDIR}.
  ${script_name} build    # Start the 64-bit (asm) build in the latest picolisp dir in \${BUILDDIR}.
  ${script_name} install  # Install the latest build from \${BUILDDIR} into \${PREFIX}.
  ${script_name} relink   # Relink the pil script to a previously installed version of picolisp.

Configuration:
(Some of these are defined in ${CONFFILE})

EOF
  local confvars="DISTRODIR BUILDDIR PREFIX DLCMD LATEST_PIL_URL \
                  WHICH_SOURCES_FOR_VERSION MAKE"
  for confvar in ${confvars}; do
    confval=$(eval echo \$${confvar})
    if [ "${confval}" ]; then
      echo "  ${confvar}=${confval}" >&2
    else
      echo "  (${confvar} is unset.)" >&2
    fi
  done
  echo "" >&2
}

_fetch () {
  mkdir -p "${DISTRODIR}" && cd "${DISTRODIR}"

  # This is the pathname of the file in the distro (tarball) that
  # contains the version number.
  local version_file_path
  if [ "${WHICH_SOURCES_FOR_VERSION}" = "32" ]; then
    version_file_path=picoLisp/src/vers.h
  else
    version_file_path=picoLisp/src64/version.l
  fi

  # Now, download the latest tarball.
  echo "Downloading latest picoLisp distro (tarball)." >&2
  ${DLCMD} ${LATEST_PIL_URL} || exit 11

  local base_tarball="${LATEST_PIL_URL##*/}"

  # Try to extract the pil version from the contents.
  local tmpdir=/tmp/$$-${USER}
  mkdir -p ${tmpdir}
  tar zxf ${base_tarball} -C ${tmpdir} ${version_file_path} || {
    echo "Could not extract the version file from the tarball.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 12
  }
  local version_file=${tmpdir}/${version_file_path}
  local pil_version
  if [ "${WHICH_SOURCES_FOR_VERSION}" = "32" ]; then
    pil_version=$(awk -F'[{}]' '/ Version.+ = / {
                                  gsub(/,/,".",$2);print $2
                                }' ${version_file})
  else
    pil_version=$(awk -F'[ ()]' '/\(de \*Version/ {
                                   v=$4;for(i=5;i<NF;i++)v=v "." $i;print v
                                 }' ${version_file})
  fi
  [ "${pil_version}" ] || {
    echo "Could not extract the version number from the version file.  Bailing ..." >&2
    echo "(BTW, find the downloaded tarball at ${base_tarball}.)" >&2
    rm -fr ${tmpdir}
    exit 13
  }
  rm -fr ${tmpdir}

  # Rename the tarball.
  local base_tarball_with_version="${base_tarball%.*}-${pil_version}.${base_tarball##*.}"
  mv ${base_tarball} ${base_tarball_with_version}
  echo "Renamed the tarball to ${base_tarball_with_version}." >&2
  echo "" >&2
  echo "Next step:" >&2
  echo "  ${script_name} extract" >&2
  return
}

_extract () {
  mkdir -p "${BUILDDIR}" && cd "${BUILDDIR}"

  local tarball=$(ls -1d ${DISTRODIR}/picoLisp-*tgz 2>/dev/null |
                     awk -F'[.-]' '{print $2, $3, $4, $0}' |
                     sort -n | awk '{print $NF}' | tail -1)

  [ "${tarball}" ] || {
    echo "Expecting to find picolisp distros in \`${DISTRODIR}\`." >&2
    echo "Found none.  Try \`${script_name} fetch\` first.  Bailing ..." >&2
    exit 21
  }

  local base_tarball=${tarball##*/}
  local new_dirname=${base_tarball%.tgz}

  echo "Extracting latest picoLisp tarball into current directory ..." >&2
  rm -fr ${new_dirname}
  tar zxf ${tarball}
  mv picoLisp ${new_dirname}
  echo "done." >&2

  echo >&2
  echo "Next step:" >&2
  echo "  ${script_name} build" >&2
  return
}

_print_latest_extract_dir_path () {
  local extract_dir=$(ls -1d ${BUILDDIR}/picoLisp-*/ 2>/dev/null |
                         awk -F'[.-]' '{print $2, $3, $4, $0}' |
                         sort -n | awk '{print $NF}' | tail -1)
  [ "${extract_dir}" ] || {
    echo "Expecting to find picolisp build directories in \`${BUILDDIR}\`." >&2
    echo "Found none.  Try \`${script_name} extract\`; then build.  Bailing ..." >&2
    return 1
  }
  echo "${extract_dir%/}"
  return
}

_build () {
  local install_dir
  install_dir=$(_print_latest_extract_dir_path) || exit 31

  if [ "${RECON}" ]; then
    echo "(cd ${install_dir}/src64 && ${MAKE})"
  else
    echo "Attempting to build 64-bit picolisp in ${install_dir}." >&2
    echo >&2
    cd ${install_dir}/src64 && ${MAKE}
    echo >&2
    echo "Next step:" >&2
    echo "  ${script_name} install" >&2
  fi
  return
}

_do_relink () {
  local installed_dir="$1"
  ${reconpre} ln -fs ${installed_dir}/bin/picolisp ${PREFIX}/bin || exit 45
  ${reconpre} ln -fs ${installed_dir}/bin/pil ${PREFIX}/bin || exit 46
  ${reconpre} ln -fhs ${installed_dir} ${PREFIX}/lib/picolisp || exit 47
  ${reconpre} ln -fs ${installed_dir}/man/man1/picolisp.1 ${PREFIX}/share/man/man1 || exit 48
  ${reconpre} ln -fs ${installed_dir}/man/man1/pil.1 ${PREFIX}/share/man/man1 || exit 49
  return
}

_install () {
  local install_dir
  install_dir=$(_print_latest_extract_dir_path) || exit 41

  [ "$RECON" ] || echo "Installing ${install_dir} to ${PREFIX} ..." >&2

  # Ensure prefix tree.
  ${reconpre} mkdir -p ${PREFIX}/bin ${PREFIX}/lib ${PREFIX}/libexec ${PREFIX}/share/man/man1 || exit 42

  local install_dir_base=${install_dir##*/}
  local installed_dir=${PREFIX}/libexec/${install_dir_base}

  ${reconpre} rm -fr ${installed_dir} || exit 43
  ${reconpre} cp -R ${install_dir} ${PREFIX}/libexec || exit 44

  # The prefix `/usr` is hard-wired into the official `pil` script; so
  # we need to jack in our prefix ${PREFIX}.
  if [ "${RECON}" ]; then
    echo sed "'s?/usr?${PREFIX}?g'" ${install_dir}/bin/pil \> ${installed_dir}/bin/pil
  else
    sed 's?/usr?'${PREFIX}'?g' ${install_dir}/bin/pil > ${installed_dir}/bin/pil
  fi

  _do_relink "${installed_dir}"

  [ "${RECON}" ] || echo "done." >&2
  return
}

_relink_select () {
  local choiceno=0
  local choices=$(ls -1d ${PREFIX}/libexec/picoLisp-* 2>/dev/null |
                     xargs -n1 basename 2>/dev/null)
  local numchoices=$(echo ${choices} | xargs -n1 | wc -l)
  local currentchoice=$(ls -ld ${PREFIX}/lib/picolisp 2>/dev/null |
                           awk '/^l/{print $NF}' | xargs basename 2>/dev/null)

  if [ -z "${choices}" ]; then
    echo "Can't relink. No picolisp installs found." >&2
    exit 51
  fi
  if [ ${numchoices} -eq 1 ]; then
    echo "Found only one picolisp install: ${choices}." >&2
    echo "Automatically relinking to this one." >&2
    echo "${choices}"
    return
  fi

  # Allow the user to select from a menu of choices.
  until [ "${choiceno}" -ge 1 ] && [ "${choiceno}" -le "${numchoices}" ]; do
    echo "Select number corresponding to your choice." >&2
    echo "" >&2
    echo ${choices} | xargs -n1 | \
      awk '{currflag = $0=="'${currentchoice}'" ? "*" : " ";
            printf("%3d. %s%s\n", ++N, currflag, $0)}' >&2
    echo "" >&2
    echo -n "Enter number: " >&2
    read choiceno
    echo "" >&2
  done

  # Return the selection that corresonds to number ${choiceno}.
  echo ${choices} | xargs -n1 | head -"${choiceno}" | tail -1
  return
}

_relink () {
  local choice=$1
  [ "${choice}" ] || choice=$(_relink_select)
  if [ "${choice}" ]; then
    _do_relink "${PREFIX}/libexec/${choice}"
  fi
  return
}

# $DISTRODIR is where you put your picoLisp distros (tarballs).
DISTRODIR=${DISTRODIR:-.}

# $BUILDDIR is where you extract your picoLisp distros (tarballs).
BUILDDIR=${BUILDDIR:-.}

reconpre= && [ "${RECON}" ] && reconpre=echo

# The latest picoLisp distro should always be at this URL.
LATEST_PIL_URL=${LATEST_PIL_URL:-http://software-lab.de/picoLisp.tgz}

# Which sources to look into find the version string: 32bit or 64bit?
WHICH_SOURCES_FOR_VERSION=${WHICH_SOURCES_FOR_VERSION:-32}

# picoLisp needs GNU make. Help the BSDs out.
if echo ${system} | grep BSD >/dev/null; then
  MAKE=${MAKE:-gmake}
fi
MAKE=${MAKE:-make}

case $1 in
 fetch | get)
  _fetch
  ;;
 extract)
  _extract
  ;;
 build)
  _build
  ;;
 install)
  _install
  ;;
 relink)
  _relink
  ;;
 *)
  _print_help
  ;;
esac
